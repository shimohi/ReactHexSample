{"version":3,"sources":["utils/HexPathCreator.ts","store/helper/DefaultHexList.ts","utils/HexRangeCalculator.ts","store/helper/DefaultHexTilesAccessor.ts","store/HexDispatcher.ts","components/contexts/HexTileContext.ts","components/contexts/RootAreaBoundsContext.ts","components/shared/SVGLayer.tsx","components/shared/Hex.ts","components/layers/overlays/HexTileOverlay.tsx","components/layers/overlays/HexTilesOverlay.tsx","components/layers/views/HexTileView.tsx","components/layers/views/HexTilesView.tsx","components/layers/touches/HexTileTouchEventListener.tsx","components/layers/touches/HexTilesTouchEventListener.tsx","components/layers/Root.tsx","components/App.tsx","serviceWorker.ts","gateway/mock/MockHexAccessorFactory.ts","domain/usecases/interactors/DefaultTilesAccessor.ts","gateway/mock/MockTilesPort.ts","index.tsx"],"names":["COS_30","Math","cos","PI","ROUND_OP","pow","HexPathCreator","center","sideLength","x","y","halfWidth","round","halfSide","L","T","createHexagonArray","startX","startY","Array","from","length","_","i","DefaultHexList","map","DefaultTiles","hexagon","id","selected","HexRangeCalculator","hexagons","reduce","res","val","nX","xX","nY","xY","cX","cY","l","t","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","minX","maxX","minY","width","height","DefaultHexTilesAccessor","listeners","Set","tilesListener","tilesDispatcher","hexagonTiles","tilesCallback","this","range","calcRange","hover","tiles","tile","path","createPath","unBind","latest","on","remove","listener","add","delete","props","notice","hexagonTile","update","values","HexDispatcher","accessor","updateTile","updateProps","HexTileDispatcherContext","React","createContext","HexTileListenerContext","RootAreaBoundsContext","SVGLayer","viewPort","viewBox","port","children","Hex","svgProps","fill","d","HexTileOverlay","useContext","strokeWidth","stroke","HexTilesOverlay","items","key","HexTileView","Fragment","fontSize","textAnchor","dominantBaseline","alignmentBaseline","HexTilesView","HexTileTouchEventListener","dispatcher","onClick","select","onMouseMove","HexTilesTouchEventListener","Root","useState","rootRange","setSize","elementRef","useRef","useEffect","mounted","reserved","updateSize","current","rect","getBoundingClientRect","onResize","setTimeout","window","addEventListener","removeEventListener","Provider","value","ref","style","position","top","left","Container","setTiles","App","setAccessor","tilesPort","hexagonAccessorFactory","clean","a","async","getTilesAccessor","getHexagonAccessor","hexagonAccessor","bind","asyncFunc","catch","e","console","warn","className","Boolean","location","hostname","match","MockHexAccessorFactory","DefaultTilesAccessor","MockTilesPort","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f2533a4.chunk.js","sourcesContent":["const COS_30 = Math.cos(30 * Math.PI / 180);\r\nconst DIGITS = 5;\r\nconst ROUND_OP = Math.pow(10, DIGITS );\r\n\r\nexport class HexPathCreator {\r\n\tpublic static createPath(\r\n\t\tcenter: readonly [number, number],\r\n\t\tsideLength: number\r\n\t): string {\r\n\r\n\t\tlet [x, y] = center;\r\n\r\n\t\t// SVGは指数表記が使えないので、小数点を丸める\r\n\t\tconst halfWidth = Math.round( sideLength * COS_30 * ROUND_OP ) / ROUND_OP;\r\n\t\tx = Math.round( x * ROUND_OP ) / ROUND_OP;\r\n\t\ty = Math.round( y * ROUND_OP ) / ROUND_OP;\r\n\t\tsideLength = Math.round(sideLength * ROUND_OP) / ROUND_OP;\r\n\t\tconst halfSide =  sideLength / 2;\r\n\r\n\t\treturn `M${x},${y - sideLength} l${halfWidth},${halfSide} v${sideLength} l${-halfWidth},${halfSide} l${-halfWidth},${-halfSide} v${-sideLength} l${halfWidth},${-halfSide}z`;\r\n\t}\r\n}","import {IHex} from \"../HexDefs\";\r\nimport {ITile} from \"../../domain/entities/Tiles\";\r\n\r\nconst L = 10;\r\nconst T = L * Math.cos(30 * Math.PI / 180 );\r\nconst createHexagonArray = ( startX: number, startY: number ) => Array.from({ length:8 }, (_, i) => [ ( startX + i * 2 * T ), startY ] );\r\n\r\nexport const DefaultHexList: ReadonlyArray<IHex> = [\r\n\t...createHexagonArray( 2 * T, L ),\r\n\t...createHexagonArray( T, L / 2 + 2 * L ),\r\n\t...createHexagonArray( 2 * T, 4 * L ),\r\n\t...createHexagonArray( T, L / 2 + 5 * L ),\r\n\t...createHexagonArray( 2 * T, 7 * L ),\r\n\t...createHexagonArray( T, L / 2 + 8 * L ),\r\n].map( (center) => {\r\n\treturn { center, sideLength: L } as any;\r\n});\r\n\r\nexport const DefaultTiles: ReadonlyArray<ITile> = DefaultHexList.map((hexagon, i) => {\r\n\treturn {\r\n\t\tid: i,\r\n\t\tselected: false,\r\n\t}\r\n});","import {IHex, IRange} from \"../store/HexDefs\";\r\n\r\nexport class HexRangeCalculator {\r\n\tpublic static calcRange(\r\n\t\thexagons: ReadonlyArray<IHex>\r\n\t): IRange {\r\n\t\tconst [minX, maxX, minY, maxY] = hexagons.reduce((\r\n\t\t\tres,\r\n\t\t\tval\r\n\t\t) => {\r\n\r\n\t\t\tconst [nX, xX, nY, xY] = res;\r\n\t\t\tconst [cX, cY] = val.center;\r\n\t\t\tconst l = val.sideLength * 2;\r\n\t\t\tconst t = l * Math.cos(30 * Math.PI / 180 ) * 2;\r\n\t\t\treturn [\r\n\t\t\t\tnX > cX - t ? cX - t : nX,\r\n\t\t\t\txX < cX + t ? cX + t : xX,\r\n\t\t\t\tnY > cY - l ? cY - l : nY,\r\n\t\t\t\txY < cY + l ? cY + l : xY,\r\n\t\t\t];\r\n\t\t}, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\r\n\t\treturn {\r\n\t\t\tx: minX,\r\n\t\t\ty: minY,\r\n\t\t\twidth: maxX - minX,\r\n\t\t\theight: maxY - minY\r\n\t\t};\r\n\t}\r\n}","import {\r\n\tIHex,\r\n\tIHexAccessor,\r\n\tIHexTile,\r\n\tIHexTiles, IHexTilesProps\r\n} from \"../HexDefs\";\r\nimport {ITilesUpdater, ITilesListener} from \"../../domain/usecases/TilesUseCases\";\r\nimport {ITile} from \"../../domain/entities/Tiles\";\r\nimport {HexPathCreator} from \"../../utils/HexPathCreator\";\r\nimport {DefaultHexList} from \"./DefaultHexList\";\r\nimport { HexRangeCalculator } from \"../../utils/HexRangeCalculator\";\r\n\r\nexport class DefaultHexTilesAccessor implements IHexAccessor {\r\n\r\n\tprivate listeners: Set<(tiles: IHexTiles) => any> = new Set();\r\n\tprivate tilesListener: ITilesListener | null = null;\r\n\tprivate tilesDispatcher: ITilesUpdater | null = null;\r\n\tprivate hexagonTiles: IHexTiles;\r\n\tprivate readonly tilesCallback: (tiles: ReadonlyArray<ITile>) => any;\r\n\tprivate readonly hexagons: ReadonlyArray<IHex>;\r\n\r\n\tconstructor(\r\n\t\thexagons?: ReadonlyArray<IHex> | null\r\n\t) {\r\n\t\tthis.hexagons = hexagons ? hexagons : [...DefaultHexList];\r\n\t\tthis.hexagonTiles = {\r\n\t\t\trange: HexRangeCalculator.calcRange(this.hexagons),\r\n\t\t\thexagons: [],\r\n\t\t\thover: -1,\r\n\t\t};\r\n\t\tthis.tilesCallback = (tiles) => {\r\n\t\t\tif (this.hexagonTiles.hexagons.length > 0) {\r\n\t\t\t\tthis.hexagonTiles = {\r\n\t\t\t\t\t...this.hexagonTiles,\r\n\t\t\t\t\thexagons: this.hexagonTiles.hexagons.map((hexagon, i) => {\r\n\t\t\t\t\t\treturn {...hexagon, tile: tiles[i]};\r\n\t\t\t\t})};\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.hexagonTiles = {\r\n\t\t\t\t...this.hexagonTiles,\r\n\t\t\t\thexagons: this.hexagons.map((hexagon, i) => {\r\n\t\t\t\t\treturn {...hexagon, tile: tiles[i], hover: false, path: HexPathCreator.createPath(hexagon.center, hexagon.sideLength)};\r\n\t\t\t})};\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get latest(): IHexTiles {\r\n\t\treturn this.hexagonTiles;\r\n\t}\r\n\r\n\tpublic bind(\r\n\t\ttilesListener: ITilesListener,\r\n\t\ttilesDispatcher: ITilesUpdater\r\n\t): void {\r\n\t\tthis.unBind();\r\n\t\tthis.tilesCallback(tilesListener.latest);\r\n\t\ttilesListener.on(this.tilesCallback);\r\n\t\tthis.tilesListener = tilesListener;\r\n\t\tthis.tilesDispatcher = tilesDispatcher;\r\n\t}\r\n\r\n\tpublic unBind(): void {\r\n\t\tthis.tilesListener?.remove(this.tilesCallback);\r\n\t\tthis.tilesListener = null;\r\n\t\tthis.tilesDispatcher = null;\r\n\t}\r\n\r\n\tpublic on(listener: (hexagonTiles: IHexTiles) => any ): void {\r\n\t\tthis.listeners.add(listener);\r\n\t}\r\n\r\n\tpublic remove(listener:(hexagonTiles: IHexTiles) => any ): void {\r\n\t\tthis.listeners.delete(listener);\r\n\t}\r\n\r\n\tpublic updateProps(props: Partial<IHexTilesProps>): void {\r\n\t\tthis.hexagonTiles = {...this.hexagonTiles, ...props };\r\n\t\tthis.notice();\r\n\t}\r\n\r\n\tpublic updateTile(hexagonTile: IHexTile): void {\r\n\t\tif (this.hexagonTiles.hexagons[hexagonTile.tile.id] === hexagonTile ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst hexagons = [...this.hexagonTiles.hexagons];\r\n\t\thexagons[hexagonTile.tile.id] = hexagonTile;\r\n\t\tthis.hexagonTiles = {\r\n\t\t\trange: this.hexagonTiles.range,\r\n\t\t\thexagons: hexagons,\r\n\t\t\thover: -1,\r\n\t\t};\r\n\t\tthis.tilesDispatcher?.update(hexagonTile.tile);\r\n\t\tthis.notice();\r\n\t}\r\n\r\n\tprivate notice(): void {\r\n\t\tfor (const listener of this.listeners.values()) {\r\n\t\t\tlistener(this.hexagonTiles);\r\n\t\t}\r\n\t}\r\n}","import {IHexAccessor, IHexTile} from \"./HexDefs\";\r\nimport {ITile} from \"../domain/entities/Tiles\";\r\n\r\nexport class HexDispatcher<T extends ITile = ITile, H extends IHexTile<T> = IHexTile<T>> {\r\n\r\n\tconstructor(\r\n\t\tprivate readonly accessor: IHexAccessor<T, H>\r\n\t) {}\r\n\r\n\tselect( hexagonTile: H): void {\r\n\t\tfor ( const hexagon of this.accessor.latest.hexagons ) {\r\n\t\t\tif ( hexagon.tile.id === hexagonTile.tile.id ) {\r\n\t\t\t\tthis.accessor.updateTile({ ...hexagon, tile: { ...hexagon.tile, selected: true }});\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif ( hexagon.tile.selected ) {\r\n\t\t\t\tthis.accessor.updateTile({ ...hexagon, tile: { ...hexagon.tile, selected: false }});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\thover( hexagonTile?: H | null): void {\r\n\t\tthis.accessor.updateProps({\r\n\t\t\thover: hexagonTile ? hexagonTile.tile.id : -1\r\n\t\t});\r\n\t}\r\n}","import React, {Context} from \"react\";\r\nimport {DefaultHexTilesAccessor} from \"../../store/helper/DefaultHexTilesAccessor\";\r\nimport {IHexTiles} from \"../../store/HexDefs\";\r\nimport {HexDispatcher} from \"../../store/HexDispatcher\";\r\n\r\nexport const HexTileDispatcherContext: Context<HexDispatcher>\r\n\t= React.createContext<HexDispatcher>(new  HexDispatcher(new DefaultHexTilesAccessor([])));\r\n\r\nexport const HexTileListenerContext: Context<IHexTiles>\r\n\t= React.createContext<IHexTiles>({ range: {x:0, y:0, width:0, height: 0}, hexagons: [], hover: -1});\r\n","import React, {Context} from \"react\";\r\nimport {IRange} from \"../../store/HexDefs\";\r\n\r\nexport const RootAreaBoundsContext: Context<IRange>\r\n\t= React.createContext<IRange>({x: 0, y: 0, width: 0, height: 0});\r\n","import React from 'react';\r\nimport {IRange} from \"../../store/HexDefs\";\r\nexport const SVGLayer: React.FC<{\r\n\tviewPort?: IRange | null,\r\n\tviewBox: IRange\r\n}> = (props) => {\r\n\tconst {viewPort, viewBox} = props;\r\n\tconst port = viewPort || viewBox;\r\n\tconst {x, y, width, height} = viewBox;\r\n\treturn (\r\n\t\t<svg x={ port.x} y={port.y} width={port.width} height={port.height} viewBox={`${x} ${y} ${width} ${height}`}>\r\n\t\t\t{props.children}\r\n\t\t</svg>\r\n\t);\r\n};","import * as React from \"react\";\r\nimport {IHexTile} from \"../../store/HexDefs\";\r\n\r\nexport interface IHexProps {\r\n\treadonly hexagonTile: IHexTile,\r\n\treadonly svgProps?: React.SVGProps<SVGPathElement>,\r\n}\r\nexport const Hex: React.FC<IHexProps> = (props ) => {\r\n\tconst {hexagonTile, svgProps} = props;\r\n\treturn React.createElement(\r\n\t\t\"path\",\r\n\t\t{...{ fill: \"transparent\", ...svgProps,  d: hexagonTile.path }},\r\n\t\tprops.children\r\n\t);\r\n};","import React, {useContext} from 'react';\r\nimport {Hex} from \"../../shared/Hex\";\r\nimport {IHexTile} from \"../../../store/HexDefs\";\r\nimport {HexTileListenerContext} from \"../../contexts/HexTileContext\";\r\n\r\nexport const HexTileOverlay: React.FC<{hexagonTile: IHexTile}> = (props) => {\r\n\tconst {hexagonTile} = props;\r\n\tconst tiles = useContext(HexTileListenerContext);\r\n\treturn (\r\n\t\t<Hex\r\n\t\t\tsvgProps={{\r\n\t\t\t\tstrokeWidth: hexagonTile.tile.id === tiles.hover ? 0.5 : 0,\r\n\t\t\t\tstroke: \"gold\",\r\n\t\t\t}}\r\n\t\t\thexagonTile={ props.hexagonTile }\r\n\t\t/>\r\n\t);\r\n};\r\n","import React, {useContext} from 'react';\r\nimport { HexTileListenerContext } from '../../contexts/HexTileContext';\r\nimport {SVGLayer} from \"../../shared/SVGLayer\";\r\nimport {HexTileOverlay} from \"./HexTileOverlay\";\r\n\r\nexport const HexTilesOverlay: React.FC = () => {\r\n\tconst {hexagons, range} = useContext(HexTileListenerContext);\r\n\tconst items = hexagons.map((hexagon) => {\r\n\t\treturn (<HexTileOverlay\r\n\t\t\tkey={hexagon.tile.id}\r\n\t\t\thexagonTile={hexagon}\r\n\t\t/>);\r\n\t});\r\n\treturn (\r\n\t\t<SVGLayer viewBox={range}>\r\n\t\t\t{items}\r\n\t\t</SVGLayer>\r\n\t);\r\n};","import React from 'react';\r\nimport {Hex} from \"../../shared/Hex\";\r\nimport {IHexTile} from \"../../../store/HexDefs\";\r\n\r\nexport const HexTileView: React.FC<{ hexagonTile: IHexTile }> = (props) => {\r\n\tconst {center, sideLength, tile} = props.hexagonTile;\r\n\tconst [x, y] = center;\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<Hex\r\n\t\t\t\tsvgProps={{\r\n\t\t\t\t\tfill: tile.selected ? \"green\" : \"none\"\r\n\t\t\t\t}}\r\n\t\t\t\thexagonTile={props.hexagonTile}\r\n\t\t\t/>\r\n\t\t\t<text\r\n\t\t\t\tx={x}\r\n\t\t\t\ty={y}\r\n\t\t\t\tfill={ tile.selected ? \"white\" : \"slategray\"}\r\n\t\t\t\tfontSize={sideLength}\r\n\t\t\t\ttextAnchor=\"middle\"\r\n\t\t\t\tdominantBaseline=\"middle\"\r\n\t\t\t\talignmentBaseline=\"middle\"\r\n\t\t\t>{tile.id + 1}</text>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n","import React, {useContext} from 'react';\r\nimport {HexTileListenerContext} from '../../contexts/HexTileContext';\r\nimport {SVGLayer} from \"../../shared/SVGLayer\";\r\nimport {HexTileView} from \"./HexTileView\";\r\n\r\nexport const HexTilesView: React.FC = () => {\r\n\tconst {hexagons, range} = useContext(HexTileListenerContext);\r\n\tconst items = hexagons.map((hexagon) => {\r\n\t\treturn (<HexTileView\r\n\t\t\tkey={hexagon.tile.id}\r\n\t\t\thexagonTile={hexagon}\r\n\t\t/>);\r\n\t});\r\n\treturn (\r\n\t\t<SVGLayer viewBox={range}>\r\n\t\t\t{items}\r\n\t\t</SVGLayer>\r\n\t);\r\n};","import React, {useContext} from 'react';\r\nimport {Hex} from \"../../shared/Hex\";\r\nimport {IHexTile} from \"../../../store/HexDefs\";\r\nimport {HexTileDispatcherContext} from \"../../contexts/HexTileContext\";\r\n\r\nexport const HexTileTouchEventListener: React.FC<{ hexagonTile: IHexTile }> = (props) => {\r\n\tconst {hexagonTile} = props;\r\n\tconst dispatcher = useContext(HexTileDispatcherContext);\r\n\tconst handleClick = () => {\r\n\t\tdispatcher.select(hexagonTile);\r\n\t};\r\n\tconst handleHOver = () => {\r\n\t\tdispatcher.hover(hexagonTile);\r\n\t};\r\n\treturn (\r\n\t\t<g onClick={handleClick} onMouseMove={handleHOver}>\r\n\t\t\t<Hex\r\n\t\t\t\thexagonTile={props.hexagonTile}\r\n\t\t\t/>\r\n\t\t</g >\r\n\t);\r\n};\r\n","import React, {useContext} from 'react';\r\nimport { HexTileListenerContext } from '../../contexts/HexTileContext';\r\nimport {SVGLayer} from \"../../shared/SVGLayer\";\r\nimport {HexTileTouchEventListener} from \"./HexTileTouchEventListener\";\r\n\r\nexport const HexTilesTouchEventListener: React.FC = () => {\r\n\tconst {hexagons, range} = useContext(HexTileListenerContext);\r\n\tconst items = hexagons.map((hexagon) => {\r\n\t\treturn (<HexTileTouchEventListener\r\n\t\t\tkey={hexagon.tile.id}\r\n\t\t\thexagonTile={hexagon}\r\n\t\t/>);\r\n\t});\r\n\treturn (\r\n\t\t<SVGLayer viewBox={range}>\r\n\t\t\t{items}\r\n\t\t</SVGLayer>\r\n\t);\r\n};","import React, {useEffect, useState, useRef, useContext} from 'react';\r\nimport { RootAreaBoundsContext } from '../contexts/RootAreaBoundsContext';\r\nimport {HexTilesOverlay} from \"./overlays/HexTilesOverlay\";\r\nimport {HexTilesView} from \"./views/HexTilesView\";\r\nimport {HexTilesTouchEventListener} from \"./touches/HexTilesTouchEventListener\";\r\nimport {SVGLayer} from \"../shared/SVGLayer\";\r\nimport {HexTileListenerContext} from \"../contexts/HexTileContext\";\r\n\r\nexport const Root: React.FC = () => {\r\n\r\n\tconst {range} = useContext(HexTileListenerContext);\r\n\tconst [rootRange, setSize] = useState({ x:0, y:0, width:0, height:0 });\r\n\tconst elementRef = useRef<HTMLDivElement | null>(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tlet mounted = true;\r\n\t\tlet reserved = false;\r\n\t\tconst updateSize = () => {\r\n\t\t\tif ( !mounted || !elementRef.current) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconst rect = elementRef.current.getBoundingClientRect();\r\n\t\t\tsetSize({\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: rect.width,\r\n\t\t\t\theight: rect.height\r\n\t\t\t});\r\n\t\t};\r\n\t\tconst onResize = () => {\r\n\t\t\tif (reserved) { return;}\r\n\t\t\treserved = true;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tupdateSize();\r\n\t\t\t\treserved = false;\r\n\t\t\t}, 100);\r\n\t\t};\r\n\t\twindow.addEventListener('resize', onResize);\r\n\t\tupdateSize();\r\n\t\treturn () => {\r\n\t\t\tmounted = false;\r\n\t\t\twindow.removeEventListener('resize', onResize);\r\n\t\t}\r\n\t}, []);\r\n\treturn (\r\n\t\t<RootAreaBoundsContext.Provider value={rootRange}>\r\n\t\t\t<div ref={elementRef} style={{\r\n\t\t\t\tposition: \"absolute\",\r\n\t\t\t\ttop: \"0px\",\r\n\t\t\t\tleft: \"0px\",\r\n\t\t\t\twidth: \"100%\",\r\n\t\t\t\theight: \"100%\",\r\n\t\t\t}}>\r\n\t\t\t\t<div style={{\r\n\t\t\t\t\tposition: \"relative\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t}}>\r\n\t\t\t\t\t<SVGLayer viewPort={rootRange} viewBox={range}>\r\n\t\t\t\t\t\t<HexTilesView />\r\n\t\t\t\t\t\t<HexTilesOverlay />\r\n\t\t\t\t\t\t<HexTilesTouchEventListener />\r\n\t\t\t\t\t</SVGLayer>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</RootAreaBoundsContext.Provider>\r\n\t);\r\n};","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {ITilesPort} from \"../domain/usecases/TilesPort\";\nimport {IHexagonAccessorFactory} from \"../store/HexAccessorFactory\";\nimport {DefaultHexTilesAccessor} from \"../store/helper/DefaultHexTilesAccessor\";\nimport {IHexAccessor, IHexTiles} from \"../store/HexDefs\";\nimport {HexTileDispatcherContext, HexTileListenerContext} from './contexts/HexTileContext';\nimport {HexDispatcher} from '../store/HexDispatcher';\nimport {Root} from \"./layers/Root\";\n\nconst App: React.FC<{\n\ttilesPort: ITilesPort,\n\thexagonAccessorFactory: IHexagonAccessorFactory\n}> = (props) => {\n\tconst [accessor, setAccessor] = useState<IHexAccessor>(new DefaultHexTilesAccessor());\n\tuseEffect(() => {\n\t\tconst {tilesPort, hexagonAccessorFactory} = props;\n\t\tlet clean = () => {\n\t\t};\n\t\tconst asyncFunc = async () => {\n\t\t\tconst [tilesDispatcher, tilesListener] = await tilesPort.getTilesAccessor();\n\t\t\tconst hexagonAccessor = await hexagonAccessorFactory.getHexagonAccessor();\n\t\t\thexagonAccessor.bind(tilesListener, tilesDispatcher);\n\t\t\tclean = () => {\n\t\t\t\thexagonAccessor.unBind();\n\t\t\t};\n\t\t\tsetAccessor(hexagonAccessor);\n\t\t};\n\t\tasyncFunc().catch((e) => {\n\t\t\tconsole.warn(e);\n\t\t});\n\t\treturn () => {\n\t\t\tclean();\n\t\t};\n\t});\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<HexTileDispatcherContext.Provider value={new HexDispatcher(accessor)}>\n\t\t\t\t<Container accessor={accessor}/>\n\t\t\t</HexTileDispatcherContext.Provider>\n\t\t</div>\n\t);\n};\n\nconst Container: React.FC<{ accessor: IHexAccessor }> = (props) => {\n\n\tconst {accessor} = props;\n\tconst [tiles, setTiles] = useState<IHexTiles>(accessor.latest);\n\tuseEffect(() => {\n\t\tconst listener = (tiles: IHexTiles) => {\n\t\t\tsetTiles(tiles);\n\t\t};\n\t\taccessor.on(listener);\n\t\tsetTiles(accessor.latest);\n\t\treturn () => {\n\t\t\taccessor.remove(listener);\n\t\t};\n\t}, [accessor]);\n\treturn (\n\t\t<HexTileListenerContext.Provider value={tiles}>\n\t\t\t<Root />\n\t\t</HexTileListenerContext.Provider>\n\t);\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {IHexagonAccessorFactory} from \"../../store/HexAccessorFactory\";\r\nimport {IHexAccessor} from \"../../store/HexDefs\";\r\nimport {DefaultHexTilesAccessor} from \"../../store/helper/DefaultHexTilesAccessor\";\r\n\r\nclass MockHexagonAccessorFactoryImpl implements IHexagonAccessorFactory {\r\n\tprivate hexagonAccessor: DefaultHexTilesAccessor = new DefaultHexTilesAccessor();\r\n\tpublic async getHexagonAccessor(): Promise<IHexAccessor> {\r\n\t\treturn this.hexagonAccessor;\r\n\t}\r\n}\r\nexport const MockHexAccessorFactory: IHexagonAccessorFactory = new MockHexagonAccessorFactoryImpl();","import {ITilesUpdater, ITilesListener} from \"../TilesUseCases\";\r\nimport {ITile} from \"../../entities/Tiles\";\r\n\r\nexport class DefaultTilesAccessor<T extends ITile = ITile> implements ITilesUpdater<T>, ITilesListener<T> {\r\n\r\n\tprivate listeners: Set<(tiles: ReadonlyArray<T>) => any> = new Set();\r\n\tconstructor(private tiles: ReadonlyArray<T>) {}\r\n\r\n\tpublic get latest(): ReadonlyArray<T> {\r\n\t\treturn this.tiles;\r\n\t}\r\n\r\n\tpublic on(listener: (tiles: ReadonlyArray<T>) => any ): void {\r\n\t\tthis.listeners.add(listener);\r\n\t}\r\n\r\n\tpublic remove(listener:(tiles: ReadonlyArray<T>) => any ): void {\r\n\t\tthis.listeners.delete(listener);\r\n\t}\r\n\r\n\tpublic update(tile: T): void {\r\n\t\tif (this.tiles[tile.id] === tile ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst tiles = [...this.tiles];\r\n\t\ttiles[tile.id] = tile;\r\n\t\tthis.tiles = tiles;\r\n\t\tfor (const listener of this.listeners.values()) {\r\n\t\t\tlistener(this.tiles);\r\n\t\t}\r\n\t}\r\n}","import {ITilesPort} from \"../../domain/usecases/TilesPort\";\r\nimport {ITile} from \"../../domain/entities/Tiles\";\r\nimport {ITilesUpdater, ITilesListener} from \"../../domain/usecases/TilesUseCases\";\r\nimport {DefaultTilesAccessor} from \"../../domain/usecases/interactors/DefaultTilesAccessor\";\r\nimport {DefaultTiles} from \"../../store/helper/DefaultHexList\";\r\n\r\nclass MockTilesPortImpl implements ITilesPort {\r\n\tprivate readonly accessor: DefaultTilesAccessor = new DefaultTilesAccessor<ITile>(DefaultTiles);\r\n\tpublic async getTilesAccessor(): Promise<readonly [ITilesUpdater<ITile>, ITilesListener<ITile>]> {\r\n\t\treturn [this.accessor, this.accessor];\r\n\t}\r\n}\r\nexport const MockTilesPort: ITilesPort = new MockTilesPortImpl();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {MockHexAccessorFactory} from \"./gateway/mock/MockHexAccessorFactory\";\nimport {MockTilesPort} from \"./gateway/mock/MockTilesPort\";\n\nReactDOM.render(\n\t<App\n\t\thexagonAccessorFactory={MockHexAccessorFactory}\n\t\ttilesPort={MockTilesPort}\n\t/>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}